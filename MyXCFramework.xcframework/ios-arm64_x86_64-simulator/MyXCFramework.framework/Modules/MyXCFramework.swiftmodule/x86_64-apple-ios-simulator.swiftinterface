// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MyXCFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import MyXCFramework
import Swift
import _Concurrency
import _StringProcessing
public struct User : Swift.Codable {
  public let username: Swift.String
  public let password: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct LoginResponse : Swift.Codable {
  public let token: Swift.String
  public let email: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class UserAuthentication {
  public init(apiClient: MyXCFramework.APIClient)
  public func login(username: Swift.String, password: Swift.String, completion: @escaping (Swift.Result<MyXCFramework.LoginResponse, MyXCFramework.APIError>) -> Swift.Void)
  public func register(username: Swift.String, password: Swift.String, completion: @escaping (Swift.Result<MyXCFramework.LoginResponse, MyXCFramework.APIError>) -> Swift.Void)
  @objc deinit
}
public enum APIPath {
  case login
  case register
  public var path: Swift.String {
    get
  }
  public static func == (a: MyXCFramework.APIPath, b: MyXCFramework.APIPath) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct APIResponse<T> : Swift.Decodable where T : Swift.Decodable {
  public let success: Swift.Bool
  public let message: Swift.String
  public let data: T?
  public init(from decoder: Swift.Decoder) throws
}
public class APIClient {
  public init()
  public func post<T>(endpoint: MyXCFramework.APIPath, parameters: [Swift.String : Any], completion: @escaping (Swift.Result<T, MyXCFramework.APIError>) -> Swift.Void) where T : Swift.Decodable
  public func get<T>(endpoint: MyXCFramework.APIPath, parameters: [Swift.String : Any], completion: @escaping (Swift.Result<T, MyXCFramework.APIError>) -> Swift.Void) where T : Swift.Decodable
  @objc deinit
}
public struct AuthenticationToken {
}
public enum AuthenticationError : Swift.Error {
}
public enum APIError : Swift.Error {
  case networkError
  case invalidResponse
  public static func == (a: MyXCFramework.APIError, b: MyXCFramework.APIError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MyXCFramework.APIPath : Swift.Equatable {}
extension MyXCFramework.APIPath : Swift.Hashable {}
extension MyXCFramework.APIError : Swift.Equatable {}
extension MyXCFramework.APIError : Swift.Hashable {}
